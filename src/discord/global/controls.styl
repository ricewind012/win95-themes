.actionButtons > [role="button"] {
	@extend button;

	height: unset;
	justify-content: center;
}

button {
	opacity: 1;
	text-decoration: none;

	min-height: unset;

	&[aria-expanded="true"] {
		@extend .icon-button:active;
	}

	// Seems like D*scord forgot about this one
	&:disabled {
		pointer-events: none;
	}

	// Serves as text-decoration
	& > .contents {
		background-image: none;
	}

	[data-text-variant] {
		text-shadow: inherit;
	}
}

.channelTextArea {
	--custom-channel-textarea-text-area-height: fit-content;

	background-color: transparent;

	button {
		@extend .icon-button;

		& > .button {
			padding: 0;
			margin: 0;
		}
	}

	.buttons {
		margin: 0;

		min-height: unset;
	}

	& > .scrollableContainer {
		opacity: 1;
		background: transparent;

		overflow: hidden;

		& > .inner {
			@extend [role="toolbar"];
		}
	}

	.spriteContainer {
		--custom-emoji-sprite-size: 16px;
	}

	// TODO: remove when doing icons
	/.lottieIcon,
	svg {
		width: 16px;
		height: 16px;
	}
}

.checkboxWrapper {
	& > input[type="checkbox"] {
		opacity: 1;
	}

	& > .checkbox {
		display: none;
	}

	& > .label {
		padding: 0;
	}
}

{$selectors[checkbox-container]} {
	margin-top: var(--text-spacing);
	margin-bottom: var(--text-spacing);

	&.disabled {
		color: var(--color-gray-text);

		input[type="checkbox"] {
			@extend input[type="checkbox"]:disabled;
		}
	}

	& > .labelRow {
		gap: var(--label-spacing);

		flex-direction: row-reverse;

		& > label {
			@extend $text-reset;

			opacity: 1;
		}
	}

	& > .note {
		color: var(--color-gray-text);
		margin-top: var(--text-spacing);
		margin-left: calc(var(--sel-button-size) + var(--label-spacing));

		& > .description {
			opacity: 1;
		}
	}

	.control {
		height: var(--sel-button-size);

		& > .container {
			opacity: 1;
			background-color: transparent;
			margin: 0;

			width: unset;
			height: unset;

			& > input[type="checkbox"] {
				opacity: 1;
			}
		}
	}

	svg {
		display: none;
	}
}

// textboxes
.inner {
	padding: 0;

	&.scrollerBase {
		overflow: hidden;
	}
}

.input {
	gap: var(--label-spacing);
}

.inputText,
.inputWrapper {
	@extend $text-reset;

	padding: 0;
}

.searchBar,
.searchBox {
	border: none;
	margin: 0;

	& > .inner {
		padding: 0;

		overflow: auto;

		// Search icon
		& > [role="button"] {
			display: none;
		}
	}
}

.textArea {
	@extend $text-reset;
}

.placeholder {
	font: var(--text-ui);
	padding: calc(var(--border-size) + 2px);

	z-index: 1;
}

.wrapper[style^="--icons-width"] {
	& > .icons {
		display: none;
	}

	& > .select {
		@extend select;

		input {
			box-shadow: none;
			padding: 0;

			height: unset;
		}
	}
}

